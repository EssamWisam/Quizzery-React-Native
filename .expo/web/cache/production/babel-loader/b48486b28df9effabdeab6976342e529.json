{"ast":null,"code":"import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import{darkColors,lightColors}from\"../../assets/colors/colors\";import{useDispatch,useSelector}from'react-redux';import{SetColorIndex}from\"../../redux/slices/settings\";import{SetDiscoveryMode}from\"../../redux/slices/settings\";import{SetAllColors}from\"../../redux/slices/settings\";import{SetAllColorsHelper}from\"../../redux/slices/settings\";import{Colors}from\"../../redux/slices/settings\";import{useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function SettingsScreen(){var colors=useSelector(Colors);var colorCodes=[\"Navy\",\"Blue Sky\",\"Purple Monarchy\",\"Toffee\",\"Orangica\",\"Pink Princess\",\"Deep Eclipse\",\"Moon Silver\",\"Lavender\",\"Pitch Black\",\"Blue Sailor\",\"Lime\"];var dispatch=useDispatch();var _ref=[useSelector(function(state){return state.settings.colorIndex;}),function(payload){return dispatch(SetColorIndex(payload));}],colorIndex=_ref[0],setColorIndex=_ref[1];var _ref2=[useSelector(function(state){return state.settings.discoveryMode;}),function(payload){return dispatch(SetDiscoveryMode(payload));}],discoveryMode=_ref2[0],setDiscoveryMode=_ref2[1];var _ref3=[useSelector(function(state){return state.settings.allColors;}),function(payload){return dispatch(SetAllColors(payload));}],allColors=_ref3[0],setAllColors=_ref3[1];var _ref4=[useSelector(function(state){return state.settings.allColorsHelper;}),function(payload){return dispatch(SetAllColorsHelper(payload));}],allColorsHelper=_ref4[0],setAllColorsHelper=_ref4[1];var shownQuestion=useSelector(function(state){return state.quiz.shownQuestion;});return _jsxs(View,{style:[styles.container,{backgroundColor:colors.dark}],children:[_jsx(View,{style:styles.logoContainer,children:_jsx(Text,{style:[styles.logo,{color:colors.light}],children:\"Settings\"})}),_jsx(View,{style:[styles.settingContainer,{backgroundColor:colors.light,borderColor:colors.dark}],children:_jsx(TouchableOpacity,{children:_jsxs(Text,{style:[styles.settingText,{color:colors.dark}],onPress:function onPress(){if(allColorsHelper==1){setAllColors(darkColors);setAllColorsHelper(0);}else{setAllColors(lightColors);setAllColorsHelper(1);}},children:[\"Theme: \",allColorsHelper===1?\"Light\":\"Dark\"]})})}),_jsx(View,{style:[styles.settingContainer,{backgroundColor:colors.light,borderColor:colors.dark}],children:_jsx(TouchableOpacity,{children:_jsxs(Text,{style:[styles.settingText,{color:colors.dark}],onPress:function onPress(){setDiscoveryMode(!discoveryMode);},children:[\"Discovery Mode: \",discoveryMode?\"On\":\"Off\"]})})}),_jsx(View,{opacity:discoveryMode?0.8:1.0,style:[styles.settingContainer,{backgroundColor:colors.light,borderColor:colors.dark}],children:_jsx(TouchableOpacity,{children:_jsxs(Text,{style:[styles.settingText,{color:colors.dark}],onPress:function onPress(){if(!discoveryMode){setColorIndex((colorIndex+1)%colorCodes.length);}},children:[\"Color Pallete: \",colorCodes[colorIndex]]})})})]});}var styles=StyleSheet.create({container:{flex:1},logo:{fontSize:40,fontFamily:'Poppins-Regular',textAlign:'left'},logoContainer:{marginTop:50,marginBottom:10,marginHorizontal:20},settingContainer:{minWidth:'90%',borderWidth:2,marginHorizontal:20,borderRadius:10,padding:10,marginVertical:10},settingText:{fontFamily:'Poppins-Bold',fontSize:17,textAlign:'left'}});","map":{"version":3,"names":["darkColors","lightColors","useDispatch","useSelector","SetColorIndex","SetDiscoveryMode","SetAllColors","SetAllColorsHelper","Colors","useEffect","SettingsScreen","colors","colorCodes","dispatch","state","settings","colorIndex","payload","setColorIndex","discoveryMode","setDiscoveryMode","allColors","setAllColors","allColorsHelper","setAllColorsHelper","shownQuestion","quiz","styles","container","backgroundColor","dark","logoContainer","logo","color","light","settingContainer","borderColor","settingText","length","StyleSheet","create","flex","fontSize","fontFamily","textAlign","marginTop","marginBottom","marginHorizontal","minWidth","borderWidth","borderRadius","padding","marginVertical"],"sources":["/Users/essam/Documents/GitHub/Quizzery-React-Native/components/SettingsScreen/SettingsScreen.js"],"sourcesContent":["import { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport {darkColors, lightColors} from '../../assets/colors/colors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SetColorIndex } from '../../redux/slices/settings';\nimport { SetDiscoveryMode } from '../../redux/slices/settings';\nimport { SetAllColors} from '../../redux/slices/settings';\nimport { SetAllColorsHelper } from '../../redux/slices/settings';\nimport { Colors } from '../../redux/slices/settings';\nimport { useEffect } from 'react';\nexport default function SettingsScreen() {\n   const colors = useSelector(Colors)\n   const colorCodes = [\"Navy\", \"Blue Sky\", \"Purple Monarchy\", \"Toffee\", \"Orangica\", \"Pink Princess\", \"Deep Eclipse\", \"Moon Silver\", \"Lavender\", \"Pitch Black\", \"Blue Sailor\", \"Lime\"];\n   const dispatch = useDispatch();\n   const [colorIndex, setColorIndex] = [ useSelector(state => state.settings.colorIndex), (payload)=> dispatch(SetColorIndex(payload))];\n   const [discoveryMode, setDiscoveryMode] = [ useSelector(state => state.settings.discoveryMode), (payload)=> dispatch(SetDiscoveryMode(payload))];\n   const [allColors, setAllColors] = [ useSelector(state => state.settings.allColors), (payload)=> dispatch(SetAllColors(payload))];\n   const [allColorsHelper, setAllColorsHelper] = [useSelector(state => state.settings.allColorsHelper), (payload)=>dispatch(SetAllColorsHelper(payload))]\n   const shownQuestion = useSelector(state => state.quiz.shownQuestion)\n\n\n   return (\n      <View style={[styles.container, {backgroundColor: colors.dark}]}>\n         <View style={styles.logoContainer}>\n            <Text style={[styles.logo, { color: colors.light }]}>\n               Settings\n            </Text>\n         </View>\n         <View style={[styles.settingContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.settingText, { color: colors.dark, }]} onPress={() => { \n                  if(allColorsHelper == 1){\n                     setAllColors(darkColors)\n                     setAllColorsHelper(0)\n                  }\n                  else {\n                     setAllColors(lightColors)\n                     setAllColorsHelper(1)\n                  }\n                  \n               }}>\n                  Theme: {(allColorsHelper === 1) ? \"Light\" : \"Dark\"}\n               </Text>\n            </TouchableOpacity>\n         </View>\n\n         <View style={[styles.settingContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.settingText, { color: colors.dark, }]} onPress={() => { \n                  setDiscoveryMode(!discoveryMode);\n               }}>\n                  Discovery Mode: {(discoveryMode) ? \"On\" : \"Off\"}\n               </Text>\n            </TouchableOpacity>\n         </View>\n\n         <View opacity={(discoveryMode)? 0.8 : 1.0} style={[styles.settingContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.settingText, { color: colors.dark, }]} onPress={() => { \n                  if(!discoveryMode) {\n                  setColorIndex((colorIndex + 1)%(colorCodes.length))\n                  }\n                  }}>\n                Color Pallete: {colorCodes[colorIndex]} \n               </Text>\n            </TouchableOpacity>\n         </View>\n\n      </View>\n   )\n}\n\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n\n   },\n   logo: {\n      fontSize: 40,\n      fontFamily: 'Poppins-Regular',\n      textAlign: 'left',\n   },\n   logoContainer: {\n      marginTop: 50,\n      marginBottom: 10,\n      marginHorizontal: 20\n   },\n\n\n   settingContainer: {\n      minWidth: '90%',\n      borderWidth: 2,\n      marginHorizontal: 20,\n      borderRadius: 10,\n      padding: 10,\n      marginVertical: 10\n   },\n   settingText: {\n      fontFamily: 'Poppins-Bold',\n      fontSize: 17,\n      textAlign: 'left'\n   }\n\n});\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}