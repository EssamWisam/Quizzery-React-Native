{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect } from 'react';\nimport { useFonts } from 'expo-font';\nimport * as Progress from 'react-native-progress';\nimport HomeScreen from \"./components/HomeScreen/HomeScreen\";\nimport QuizScreen from \"./components/QuizScreen/QuizScreen\";\nimport StatsScreen from \"./components/StatScreen/StatsScreen\";\nimport SettingsScreen from \"./components/SettingsScreen/SettingsScreen\";\nimport AboutScreen from \"./components/AboutScreen/AboutScreen\";\nimport { lightColors } from \"./assets/colors/colors\";\nimport Entries from \"./assets/data/QuizEntriesIdioms\";\nimport 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Provider } from 'react-redux';\nimport { persistor } from \"./redux/store\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RotateColor } from \"./redux/slices/settings\";\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store } from \"./redux/store\";\nimport { SetNewQuiz } from \"./redux/slices/quiz\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\n\nvar AppWrapper = function AppWrapper() {\n  return _jsx(Provider, {\n    store: store,\n    children: _jsx(PersistGate, {\n      persistor: persistor,\n      children: _jsx(App, {})\n    })\n  });\n};\n\nfunction App() {\n  var _useFonts = useFonts({\n    'Poppins-Light': require(\"./assets/fonts/Poppins-Light.ttf\"),\n    'Poppins-Regular': require(\"./assets/fonts/Poppins-Regular.ttf\"),\n    'Poppins-Italic': require(\"./assets/fonts/Poppins-Italic.ttf\"),\n    'Poppins-Bold': require(\"./assets/fonts/Poppins-Bold.ttf\"),\n    'Poppins-ExtraBoldItalic': require(\"./assets/fonts/Poppins-ExtraBoldItalic.ttf\"),\n    'Poppins-ExtraBold': require(\"./assets/fonts/Poppins-ExtraBold.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  var dispatch = useDispatch();\n  var newQuiz = useSelector(function (state) {\n    return state.quiz.newQuiz;\n  });\n  useEffect(function () {\n    if (newQuiz) {\n      dispatch(SetNewQuiz(false));\n\n      for (var i = Entries.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var _ref = [Entries[j], Entries[i]];\n        Entries[i] = _ref[0];\n        Entries[j] = _ref[1];\n      }\n    }\n  }, [newQuiz]);\n  var totalCount = Entries.length;\n  var shownQuestion = useSelector(function (state) {\n    return state.quiz.shownQuestion;\n  });\n  var correctAnswers = Entries.map(function (_ref2) {\n    var correct = _ref2.correct;\n    return correct;\n  });\n  var allColorsHelper = useSelector(function (state) {\n    return state.settings.allColorsHelper;\n  });\n  useEffect(function () {\n    dispatch(RotateColor());\n  }, [shownQuestion]);\n\n  if (!fontsLoaded) {\n    return _jsx(Progress.CircleSnail, {\n      color: ['red', 'green', 'blue']\n    });\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: allColorsHelper == 1 ? \"dark\" : \"light\"\n    }), _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        children: [_jsx(Stack.Screen, {\n          name: \"HomeScreen\",\n          options: {\n            headerShown: false\n          },\n          children: function children(props) {\n            return _jsx(HomeScreen, _objectSpread({}, props));\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"QuizScreen\",\n          options: {\n            headerShown: false\n          },\n          children: function children(props) {\n            return _jsx(QuizScreen, _objectSpread(_objectSpread({}, props), {}, {\n              totalCount: totalCount,\n              correctAnswers: correctAnswers,\n              shownQuestion: shownQuestion\n            }));\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"StatsScreen\",\n          options: {\n            headerShown: false\n          },\n          children: function children(props) {\n            return _jsx(StatsScreen, _objectSpread(_objectSpread({}, props), {}, {\n              correctAnswers: correctAnswers\n            }));\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"SettingsScreen\",\n          options: {\n            headerShown: false\n          },\n          children: function children(props) {\n            return _jsx(SettingsScreen, _objectSpread({}, props));\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"AboutScreen\",\n          options: {\n            title: 'My home',\n            headerStyle: {\n              backgroundColor: '#f4511e'\n            },\n            headerTintColor: '#fff',\n            headerTitleStyle: {\n              fontWeight: 'bold'\n            }\n          },\n          children: function children(props) {\n            return _jsx(AboutScreen, _objectSpread({}, props));\n          }\n        })]\n      })\n    })]\n  });\n}\n\nexport default AppWrapper;","map":{"version":3,"names":["StatusBar","React","useEffect","useFonts","Progress","HomeScreen","QuizScreen","StatsScreen","SettingsScreen","AboutScreen","lightColors","Entries","NavigationContainer","createStackNavigator","Provider","persistor","useSelector","useDispatch","RotateColor","PersistGate","store","SetNewQuiz","Stack","AppWrapper","App","require","fontsLoaded","dispatch","newQuiz","state","quiz","i","length","j","Math","floor","random","totalCount","shownQuestion","correctAnswers","map","correct","allColorsHelper","settings","headerShown","props","title","headerStyle","backgroundColor","headerTintColor","headerTitleStyle","fontWeight"],"sources":["/Users/essam/Documents/GitHub/Quizzery-React-Native/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect } from 'react';\nimport { useFonts } from 'expo-font';\nimport * as Progress from 'react-native-progress';\nimport HomeScreen from './components/HomeScreen/HomeScreen';\nimport QuizScreen from './components/QuizScreen/QuizScreen';\nimport StatsScreen from './components/StatScreen/StatsScreen';\nimport SettingsScreen from './components/SettingsScreen/SettingsScreen';\nimport AboutScreen from './components/AboutScreen/AboutScreen';\nimport { lightColors } from './assets/colors/colors';\nimport Entries from './assets/data/QuizEntriesIdioms';\nimport 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Provider } from 'react-redux';\nimport { persistor } from './redux/store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RotateColor } from './redux/slices/settings'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { store } from './redux/store';\nimport { SetNewQuiz } from './redux/slices/quiz';\n\nconst Stack = createStackNavigator();\n\nconst AppWrapper = () => {\n  return (\n    <Provider store={store}>\n       <PersistGate persistor={persistor}>  \n      <App />\n       </PersistGate>  \n    </Provider>\n  )\n}\n\nfunction App() {\n\n  const [fontsLoaded] = useFonts({\n    'Poppins-Light': require('./assets/fonts/Poppins-Light.ttf'),\n    'Poppins-Regular': require('./assets/fonts/Poppins-Regular.ttf'),\n    'Poppins-Italic': require('./assets/fonts/Poppins-Italic.ttf'),\n    'Poppins-Bold': require('./assets/fonts/Poppins-Bold.ttf'),\n    'Poppins-ExtraBoldItalic': require('./assets/fonts/Poppins-ExtraBoldItalic.ttf'),\n    'Poppins-ExtraBold': require('./assets/fonts/Poppins-ExtraBold.ttf'),\n  });\n  const dispatch = useDispatch();\n\n  const newQuiz = useSelector(state => state.quiz.newQuiz);\n  useEffect(() => {\n    if (newQuiz) {\n      dispatch(SetNewQuiz(false));\n      for (var i = Entries.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [Entries[i], Entries[j]] = [Entries[j], Entries[i]];\n    }\n    }\n  },[newQuiz]);\n\n  const totalCount = Entries.length;\n\n  const shownQuestion = useSelector(state => state.quiz.shownQuestion)\n\n  const correctAnswers = Entries.map(({ correct }) => correct)\n\n\n\n  const allColorsHelper = useSelector(state => state.settings.allColorsHelper)\n\n  useEffect(() => { \n    dispatch(RotateColor()) }, [shownQuestion]);\n\n  if (!fontsLoaded) {\n    return <Progress.CircleSnail color={['red', 'green', 'blue']} />\n  }\n\n  return (\n    <>\n      <StatusBar style={(allColorsHelper == 1) ? \"dark\" : \"light\"} />\n      <NavigationContainer>\n        <Stack.Navigator>\n\n          <Stack.Screen name=\"HomeScreen\" options={{ headerShown: false }}>\n            {(props) => <HomeScreen  {...props} />}\n          </Stack.Screen>\n\n          <Stack.Screen name=\"QuizScreen\" options={{ headerShown: false }}>\n            {(props) => <QuizScreen {...props} totalCount={totalCount} correctAnswers={correctAnswers}\n                          shownQuestion={shownQuestion} />}\n          </Stack.Screen>\n\n          <Stack.Screen name=\"StatsScreen\" options={{ headerShown: false }}>\n            {(props) => <StatsScreen {...props} correctAnswers={correctAnswers} />}\n          </Stack.Screen>\n\n          <Stack.Screen name=\"SettingsScreen\" options={{ headerShown: false }}>\n            {(props) =>  <SettingsScreen {...props} />}\n          </Stack.Screen>\n\n          <Stack.Screen name=\"AboutScreen\" \n          options={{\n            title: 'My home',\n            headerStyle: {\n              backgroundColor: '#f4511e',\n            },\n            headerTintColor: '#fff',\n            headerTitleStyle: {\n              fontWeight: 'bold',\n            },\n          }}\n\n          \n          >\n            {(props) =>  <AboutScreen {...props} />}\n          </Stack.Screen>\n\n        </Stack.Navigator>\n      </NavigationContainer>\n    </>\n  )\n\n\n}\n\nexport default AppWrapper;"],"mappings":"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"},"metadata":{},"sourceType":"module"}